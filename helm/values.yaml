psql:
  dbBackupName: ""
  dbBackupData: ""
  projectNamespace: ""
  clusterName: ""
  tenantBackupModulesForId: ""
  tenantBackupModulesForAdminUsername: ""
  tenantBackupModulesForAdminPassword: ""
  s3BackupsBucketName: ""
  s3BackupsBucketDirectory: ""
  job:
    action: "restore" # There is 2 values, "backup" and "restore"
    backoffLimit: "0"
    ttlSecondsAfterFinished: "10"
    activeDeadlineSeconds: "18000"
    initContainer:
      name: "init-chmod-data"
      image:
        repository: "public.ecr.aws/bitnami/bitnami-shell"
        pullPolicy: Always
        tag: "11-debian-11-r114"
      resources:
        limits:
          cpu: "400m"
          memory: "512Mi"
        requests:
          cpu: "80m"
          memory: "400Mi"
      postgresUserGroupId: "1001:1001"
      # Postgres User:GroupID that needs to have access to mounted volume, so, we grant the permissions using init container
    container:
      image:
        repository: "732722833398.dkr.ecr.us-west-2.amazonaws.com/psql-restore"
        pullPolicy: Always
        tag: "latest"
      # The below secret provided with every project deployment and give us such env variables:
      # AWS_BUCKET, AWS_ACCESS_KEY_ID, AWS_SECRET_ACCESS_KEY that we use to do aws s3 cp operation
      ##
      s3CredentialsSecret: "s3-postgres-backups-credentials"

      # The below secret provided with every project deployment and give us such env variables:
      # DB_HOST(postgres url of pod in cluster), DB_USERNAME, DB_PASSWORD, DB_DATABASE(db name)
      ##
      dbCredentialsSecret: "db-credentials"

      volumeName: "psql-backup-data"
      mountPath: "/tmp/ebs-volume"
      restartPolicy: "Never"
      command: "'/bin/bash', '/pg_dump_restore.sh'"
      resources:
        limits:
          cpu: "1024m"
          memory: "2048Mi"
        requests:
          cpu: "500m"
          memory: "1024Mi"
  pvc:
    name: "psql-backup-volume"
    storageClassName: "gp2"
    storageSize: "100Gi"

nameOverride: ""
fullnameOverride: ""