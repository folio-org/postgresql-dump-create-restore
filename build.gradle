plugins {
    id 'base'

    id "com.bmuschko.docker-remote-api" version "7.4.0"

    id 'org.unbroken-dome.helm' version '1.7.0'
    id 'org.unbroken-dome.helm-publish' version '1.7.0'
}

task publish {}

import com.bmuschko.gradle.docker.tasks.image.DockerBuildImage
import com.bmuschko.gradle.docker.tasks.image.DockerPushImage
import com.bmuschko.gradle.docker.tasks.image.DockerRemoveImage
import org.apache.tools.ant.filters.ReplaceTokens

// docker
def imagesNames = []
def fullImageName = ""
if (project.hasProperty("dockerRegistryUrl")) {
    def imageName = "${project.group.replaceAll("\\.", "/")}/${project.name}"
    def projectVersion = project.hasProperty("projectVersion") ? project.projectVersion : project.version
    imagesNames = ["${dockerRegistryUrl}/${imageName}:${projectVersion}"]
    fullImageName = "${dockerRegistryUrl}/${imageName}:${projectVersion}"
    if (project.hasProperty("dockerTags")) {
        dockerTags = project.dockerTags.split(',').each { tag -> tag.trim() }
        project.dockerTags.each { tag ->
            images.add("${dockerRegistryUrl}/${imageName}:${tag}")
        }
    }

    docker {
        registryCredentials {
            url = dockerRegistryUrl
            username = dockerRegistryUsername
            password = dockerRegistryPassword
        }
    }
}

task buildDockerImage(type: DockerBuildImage) {
    group 'docker'
    inputDir = file('docker')
    images = imagesNames
}

task publishDockerImage(type: DockerPushImage) {
    group 'docker'
    images = imagesNames
}

task removeDockerImage(type: DockerRemoveImage) {
    group 'docker'
    force = true
    /*images = imagesNames*/
    targetImageId fullImageName
}

// helm
def helmRegistryUrlDefined = false
if (project.hasProperty("helmRegistryUrl")) {
    helmRegistryUrlDefined = true
}

helm {
    charts {
        'psql-dump' {
            sourceDir = file('helm')
            chartVersion = project.hasProperty("projectVersion") ? project.projectVersion : project.version
            filtering {
                if (helmRegistryUrlDefined) {
                    values.put 'repository', project.helmRegistryUrl
                }

                project.properties.findAll
                { key, value ->
                    key && value && value instanceof String
                }.each { key, value ->
                    values.put key, value
                }
            }
        }
    }

    if (helmRegistryUrlDefined) {
        repositories {
            folioRepositoryUrl {
                url = uri project.helmRegistryUrl
                credentials {
                    username = project.helmRegistryUsername
                    password = project.helmRegistryPassword
                }
            }
        }

        publishing {
            repositories {
                artifactory {
                    url = uri project.helmRegistryUrl
                    credentials {
                        username = project.helmRegistryUsername
                        password = project.helmRegistryPassword
                    }
                }
            }
        }
    }
}

if (!(project.ext.properties.containsKey("disableHelmSourcesProcessing") && project.ext.disableHelmSourcesProcessing)) {
    project.afterEvaluate {
        helm.charts.each { chart ->
            def chartName = chart.name.capitalize()
            def task = project.task("processHelm${chartName}ChartSources") {
                doLast {
                    def values = project.properties
                            .findAll { key, value -> key && value && value instanceof String }

                    project.copy {
                        from chart.sourceDir
                        into "${buildDir}/helm/charts/${chart.name}"
                        exclude "*.*"
                        filter(ReplaceTokens, tokens: values)
                    }
                }
            }

            def originalTask = project.getTasks().findByName("helmCollect${chartName}ChartSources")
            originalTask.finalizedBy task
        }
    }
}

//define task dependencies
build.dependsOn tasks.helmPackage
helmPackage.dependsOn tasks.buildDockerImage

publish.dependsOn tasks.helmPublish
helmPublish.dependsOn tasks.publishDockerImage
publishDockerImage.finalizedBy(removeDockerImage)
